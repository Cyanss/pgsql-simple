<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cyan.simple.pgsql.dao.mapper.ThingMapper">
    <resultMap type="cyan.simple.pgsql.dao.entity.ThingEntity" id="thingMap">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="properties" column="properties"/>
        <result property="type" column="type"/>
        <result property="location" column="location"/>
        <result property="time" column="time"/>
        <result property="data" column="data"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="select_all_column">
        id, "name", "description", properties, type, st_asewkb(location) AS location, "time", "data", create_time, update_time
    </sql>

    <sql id="alert_all_column">
        id, "name", "description", properties, type, location, "time", "data", create_time, update_time
    </sql>
    
    <insert id="save">
        INSERT INTO thing ( <include refid="alert_all_column"/> )
        VALUES (
        #{entity.id},
        #{entity.name},
        #{entity.description},
        #{entity.properties},
        #{entity.type},
        st_geomfromewkb(#{entity.location}),
        #{entity.time},
        #{entity.data},
        <!-- you can use 'now()' to replace this -->
        #{entity.createTime},
        #{entity.updateTime}
        ) ON CONFLICT (id) DO UPDATE
        <set>
            "name" = CASE WHEN EXCLUDED."name" IS NOT NULL THEN EXCLUDED."name" ELSE thing."name" END,
            "description" = CASE WHEN EXCLUDED."description" IS NOT NULL THEN EXCLUDED."description" ELSE thing."description" END,
            properties = CASE WHEN EXCLUDED.properties IS NOT NULL THEN EXCLUDED.properties ELSE thing.properties END,
            type = CASE WHEN EXCLUDED.type IS NOT NULL THEN EXCLUDED.type ELSE thing.type END,
            location = CASE WHEN EXCLUDED.location IS NOT NULL THEN EXCLUDED.location ELSE thing.location END,
            "time" = CASE WHEN EXCLUDED."time" IS NOT NULL THEN EXCLUDED."time" ELSE thing."time" END,
            "data" = CASE WHEN EXCLUDED."data" IS NOT NULL THEN EXCLUDED."data" ELSE thing."data" END,
            <!-- you can use 'update_time = now()' to replace this -->
            update_time = CASE WHEN EXCLUDED.update_time IS NOT NULL THEN EXCLUDED.update_time ELSE thing.update_time END
        </set>
    </insert>

    <update id="saveAll">
        INSERT INTO thing ( <include refid="alert_all_column"/> )
        VALUES
        <foreach item="entity" index="index" collection="entityList" separator=",">
            (
            #{entity.id},
            #{entity.name},
            #{entity.description},
            #{entity.properties},
            #{entity.type},
            st_geomfromewkb(#{entity.location}),
            #{entity.time},
            #{entity.data},
            <!-- you can use 'now()' to replace this -->
            #{entity.createTime},
            #{entity.updateTime}
            )
        </foreach>
        ON CONFLICT (id) DO UPDATE
        <set>
            "name" = CASE WHEN EXCLUDED."name" IS NOT NULL THEN EXCLUDED."name" ELSE thing."name" END,
            "description" = CASE WHEN EXCLUDED."description" IS NOT NULL THEN EXCLUDED."description" ELSE thing."description" END,
            properties = CASE WHEN EXCLUDED.properties IS NOT NULL THEN EXCLUDED.properties ELSE thing.properties END,
            type = CASE WHEN EXCLUDED.type IS NOT NULL THEN EXCLUDED.type ELSE thing.type END,
            location = CASE WHEN EXCLUDED.location IS NOT NULL THEN EXCLUDED.location ELSE thing.location END,
            "time" = CASE WHEN EXCLUDED."time" IS NOT NULL THEN EXCLUDED."time" ELSE thing."time" END,
            "data" = CASE WHEN EXCLUDED."data" IS NOT NULL THEN EXCLUDED."data" ELSE thing."data" END,
            <!-- you can use 'update_time = now()' to replace this -->
            update_time = CASE WHEN EXCLUDED.update_time IS NOT NULL THEN EXCLUDED.update_time ELSE thing.update_time END
        </set>

    </update>

    <delete id="deleteById">
        DELETE FROM thing
        WHERE id = #{id}
    </delete>

    <delete id="deleteAll">
        DELETE FROM thing
        WHERE id IN
        <foreach item="id" index="index" collection="idList" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="findById" resultMap="thingMap">
        SELECT<include refid="select_all_column"/>
        FROM thing
        WHERE id = #{id}
    </select>

    <select id="findAll" resultMap="thingMap">
        SELECT
        <include refid="select_all_column"/>
        FROM thing
        WHERE id IN
        <foreach item="id" index="index" collection="idList" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="findAllByWhere" resultMap="thingMap">
        SELECT
        <include refid="select_all_column"/>
        FROM thing
        <!-- It's not affecting for the database query with the index to use 'WHERE 1=1' here -->
        WHERE 1=1
        <if test="whereSql!=null">
            ${whereSql}
        </if>
    </select>

    <delete id="deleteAllByWhere">
        DELETE FROM thing
        <!-- It's not affecting for the database query with the index to use 'WHERE 1=1' here -->
        WHERE 1=1
        <if test="whereSql!=null">
            ${whereSql}
        </if>
    </delete>

    <select id="findByName" resultMap="thingMap">
        SELECT <include refid="select_all_column"/>
        FROM thing
        WHERE name = #{name}
    </select>

    <select id="findByNameAndNotId" resultMap="thingMap">
        SELECT <include refid="select_all_column"/>
        FROM thing
        WHERE name = #{name}
        AND id != #{id}
    </select>
</mapper>